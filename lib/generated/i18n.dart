import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
      GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get Like => "Like";
  String get about => "About";
  String get actionCancel => "Cancel";
  String get actionConfirm => "Confirm";
  String get appName => "Love Music";
  String get appUpdateActionDownloadAgain => "Download";
  String get appUpdateActionInstallApk => "Install";
  String get appUpdateActionUpdate => "Update";
  String get appUpdateCheckUpdate => "Check Update";
  String get appUpdateDoubleBackTips => "Press back again, cancel download";
  String get appUpdateDownloadCanceled => "Download canceled";
  String get appUpdateDownloadFailed => "Download failed";
  String get appUpdateDownloading => "Downloading...";
  String get appUpdateLeastVersion => "Least version now ";
  String get appUpdateReDownloadContent =>
      "It has been detected that it has been downloaded, whether it is installed?";
  String get appUpdateUpdate => "Version Update";
  String get article_tag_top => "Top";
  String get autoBySystem => "Auto";
  String get clear => "Clear";
  String get close => "Close";
  String get coin => "Coin";
  String get collectionRemove => "Remove";
  String get darkMode => "Dark Mode";
  String get favourites => "Favorites";
  String get feedback => "FeedBack";
  String get fieldNotNull => "not empty";
  String get fontKuaiLe => "ZCOOL KuaiLe";
  String get githubIssue => "Can't find mail app,please github issues";
  String get loadFailed => "Load failed,retry later";
  String get logout => "Sign Out";
  String get myFavourites => "My favourites";
  String get needLogin => "Go to Sign In";
  String get noAccount => "No Account ? ";
  String get openBrowser => "Open Browser";
  String get password => "Please input Password";
  String get rate => "Rate";
  String get rePassword => "Confirm Password";
  String get refresh => "Refresh";
  String get refreshTwoLevel => "release to enter second floor";
  String get retry => "Retry";
  String get searchHistory => "History";
  String get searchHot => "Hot";
  String get searchSuggest => "Track,album,artist,podcast";
  String get searchShake => "Shake";
  String get setting => "Setting";
  String get settingFont => "System Font";
  String get settingLanguage => "Language";
  String get share => "Share";
  String get signIn => "Sign In";
  String get signIn3thd => "More";
  String get welcome => "Welcome";
  String get signUp => "Sign Up";
  String get splashSkip => "Skip";
  String get tabSearch => "Search";
  String get searchResult => "Search Result:";
  String get tabMusic => "Music";
  String get tabFavorite => "Favorite";
  String get tabUser => "Me";
  String get theme => "Theme";
  String get toSignIn => "Sign In";
  String get albums => "Albums";
  String get viewAll => "View All";
  String get forYou => "For you";
  String get toSignUp => "Sign Up";
  String get twoPwdDifferent => "The two passwords differ";
  String get unLike => "UnLike";
  String get userName => "Please input Username";
  String get viewStateButtonLogin => "Sign In";
  String get viewStateButtonRefresh => "Refresh";
  String get viewStateButtonRetry => "Retry";
  String get viewStateMessageEmpty => "Nothing Found";
  String get viewStateMessageError => "Load Failed";
  String get viewStateMessageNetworkError => "Load Failed,Check network ";
  String get viewStateMessageUnAuth => "Not sign in yet";
  String get wechatAccount => "Wechat";
  String appUpdateFoundNewVersion(String version) => "New version $version";
}

class $en extends S {
  const $en();
}

class $vi extends S {
  const $vi();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get favourites => "Yêu thích";
  @override
  String get appUpdateLeastVersion => "cập nhật";
  @override
  String get twoPwdDifferent => "Khác nhau";
  @override
  String get viewStateButtonRetry => "Thử lại";
  @override
  String get about => "về";
  @override
  String get unLike => "Bỏ thích";
  @override
  String get signUp => "Đăng kí";
  @override
  String get viewStateMessageEmpty => "Trống";
  @override
  String get appUpdateActionInstallApk => "Cài đặt";
  @override
  String get viewStateMessageUnAuth => "Bạn chưa có tài khoản";
  @override
  String get setting => "Cài dặt";
  @override
  String get settingFont => "Phông chữ";
  @override
  String get feedback => "Đánh giá";
  @override
  String get logout => "Đăng xuất";
  @override
  String get password => "Mật khẩu";
  @override
  String get searchShake => "Lắc";
  @override
  String get Like => "Yêu thích";
  @override
  String get viewStateMessageNetworkError => "Lỗi, hãy thử lại";
  @override
  String get appUpdateActionDownloadAgain => "down load";
  @override
  String get autoBySystem => "Auto";
  @override
  String get viewStateButtonRefresh => "Refresh";
  @override
  String get appUpdateDoubleBackTips => "Huỷ download";
  @override
  String get loadFailed => "Load lỗi";
  @override
  String get refreshTwoLevel => "phát hành để vào tầng hai";
  @override
  String get article_tag_top => "Top";
  @override
  String get appUpdateDownloadFailed => "Download failed";
  @override
  String get appUpdateReDownloadContent =>
      "It has been detected that it has been downloaded, whether it is installed?";
  @override
  String get noAccount => "Bạn không có tài khoản? ";
  @override
  String get openBrowser => "Mở trình duyệt";
  @override
  String get appUpdateActionUpdate => "Update";
  @override
  String get coin => "coin";
  @override
  String get splashSkip => "Bỏ qua";
  @override
  String get collectionRemove => "Xoá";
  @override
  String get actionConfirm => "Xác nhận";
  @override
  String get fontKuaiLe => "ZCOOL KuaiLe";
  @override
  String get appUpdateCheckUpdate => "Check Update";
  @override
  String get settingLanguage => "Ngôn ngữ";
  @override
  String get myFavourites => "Yêu thích";
  @override
  String get signIn3thd => "Thêm nữa";
  @override
  String get welcome => "Welcome";
  @override
  String get viewStateMessageError => "load lỗi";
  @override
  String get rate => "đánh giá";
  @override
  String get actionCancel => "Huỷ";
  @override
  String get theme => "Theme";
  @override
  String get share => "Chia sẻ";
  @override
  String get appUpdateUpdate => "version update";
  @override
  String get fieldNotNull => "not null";
  @override
  String get close => "đóng";
  @override
  String get retry => "thử lại";
  @override
  String get wechatAccount => "wechat";
  @override
  String get toSignUp => "Đăng kí";
  @override
  String get appUpdateDownloading => "Loading...";
  @override
  String get appName => "Love Music";
  @override
  String get tabUser => "Me";
  @override
  String get clear => "Xoá";
  @override
  String get needLogin => "Đăng nhập";
  @override
  String get refresh => "refresh";
  @override
  String get toSignIn => "Đăng nhập";
  @override
  String get albums => "albums";
  @override
  String get viewAll => "Xem tất cả";
  @override
  String get forYou => "Dành cho bạn";
  @override
  String get userName => "Tên đăng nhập";
  @override
  String get appUpdateDownloadCanceled => "Cancel";
  @override
  String get tabSearch => "search";
  @override
  String get searchResult => "Kết quả tìm kiếm:";
  @override
  String get tabMusic => "Âm nhạc";
  @override
  String get tabFavorite => "Yêu thích";
  @override
  String get rePassword => "Nhập lại mật khẩu";
  @override
  String get signIn => "Đăng nhập";
  @override
  String get githubIssue => "issue";
  @override
  String get viewStateButtonLogin => "Đăng nhập";
  @override
  String get searchHot => "searchHot";
  @override
  String get searchSuggest => "searchSuggest";
  @override
  String get darkMode => "Dark Mode";
  @override
  String get searchHistory => "searchHistory";
  @override
  String appUpdateFoundNewVersion(String version) => "发现新版本$version,是否更新?";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("vi", ""),
    ];
  }

  LocaleListResolutionCallback listResolution(
      {Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution(
      {Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "vi":
          S.current = const $vi();
          return SynchronousFuture<S>(S.current);
        default:
        // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported,
      bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry &&
            (supportedLocale.countryCode == null ||
                supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
    ? null
    : l.countryCode != null && l.countryCode.isEmpty
        ? l.languageCode
        : l.toString();
